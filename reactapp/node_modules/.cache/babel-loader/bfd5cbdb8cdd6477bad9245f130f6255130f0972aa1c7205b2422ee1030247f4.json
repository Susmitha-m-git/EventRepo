{"ast":null,"code":"const API_BASE_URL = 'https://eventrepo-3.onrender.com/api';\nconst createHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\nexport const getEvents = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      headers: createHeaders()\n    });\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to fetch events: ${response.status} ${errorData}`);\n    }\n    const data = await response.json();\n    return {\n      data\n    };\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw new Error(`Network error: ${error.message}`);\n  }\n};\nexport const createEvent = async event => {\n  if (!event || !event.title) {\n    throw new Error('Invalid event data');\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify(event)\n    });\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to create event: ${response.status} ${errorData}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating event:', error);\n    throw new Error(`Network error: ${error.message}`);\n  }\n};\nexport const rsvpToEvent = async (eventId, attendeeName) => {\n  if (!eventId || !(attendeeName !== null && attendeeName !== void 0 && attendeeName.trim())) {\n    throw new Error('Invalid RSVP data');\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/rsvp?attendee=${encodeURIComponent(attendeeName.trim())}`, {\n      method: 'POST',\n      headers: createHeaders()\n    });\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to RSVP: ${response.status} ${errorData}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error RSVPing to event:', error);\n    throw new Error(`Network error: ${error.message}`);\n  }\n};\nexport const deleteEvent = async eventId => {\n  const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","createHeaders","token","localStorage","getItem","getEvents","response","fetch","headers","ok","errorData","text","Error","status","data","json","error","console","message","createEvent","event","title","method","body","JSON","stringify","rsvpToEvent","eventId","attendeeName","trim","encodeURIComponent","deleteEvent"],"sources":["C:/Users/roopa/Downloads/7c472156-04dc-4f9d-a70b-583e9ec537ed-89d5830e-67ff-4cea-a4e7-1923775caa72/reactapp/src/api.js"],"sourcesContent":["const API_BASE_URL = 'https://eventrepo-3.onrender.com/api';\r\n\r\nconst createHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\nexport const getEvents = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/events`, {\r\n      headers: createHeaders()\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`Failed to fetch events: ${response.status} ${errorData}`);\r\n    }\r\n    const data = await response.json();\r\n    return { data };\r\n  } catch (error) {\r\n    console.error('Error fetching events:', error);\r\n    throw new Error(`Network error: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const createEvent = async (event) => {\r\n  if (!event || !event.title) {\r\n    throw new Error('Invalid event data');\r\n  }\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/events`, {\r\n      method: 'POST',\r\n      headers: createHeaders(),\r\n      body: JSON.stringify(event),\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`Failed to create event: ${response.status} ${errorData}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating event:', error);\r\n    throw new Error(`Network error: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const rsvpToEvent = async (eventId, attendeeName) => {\r\n  if (!eventId || !attendeeName?.trim()) {\r\n    throw new Error('Invalid RSVP data');\r\n  }\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/rsvp?attendee=${encodeURIComponent(attendeeName.trim())}`, {\r\n      method: 'POST',\r\n      headers: createHeaders()\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`Failed to RSVP: ${response.status} ${errorData}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error RSVPing to event:', error);\r\n    throw new Error(`Network error: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const deleteEvent = async (eventId) => {\r\n  const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return response.json();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}